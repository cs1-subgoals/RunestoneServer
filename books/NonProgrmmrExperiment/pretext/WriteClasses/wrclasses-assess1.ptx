<section xml:id="write-classes_assessment-writing-classes-1" xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en-US">
        <title>Assessment: Writing Classes 1</title>
        <xi:include href='./subgoals-write-classes.ptx' />
<exercises time-limit="10" pause="no">
        <TimedNode line="63" runestone_options="{'nofeedback': None, 'subchapter': 'wrclasses-assess1', 'chapter': 'WriteClasses', 'basecourse': 'Subgoals', 'optional': '', 'optclass': '', 'divid': 'assess-wrclasses-1', 'qnumber': '', 'question_marker': '8.4.1'}" source="/Users/bmiller/Runestone/books/thinkcspy/Subgoals/_sources/WriteClasses/wrclasses-assess1.rst">

    <exercise xml:id="assess-wrclasses-1-1">
        <statement>

            <p>Q1: Consider the following class defintion.</p>
            <program language="java"><input>
/* Coins Class */
public class Coins {
   private int quarters;
   private int dimes;
   private int nickels;
   private int pennies;

   public Coins(int newQuarters, int newDimes, int newNickels, int newPennies) {
      setQuarters( newQuarters );
      setDimes( newDimes );
      setNickels( newNickels );
      setPennies( newPennies );
   }

   public Coins( ) {
      setQuarters( 0 );
      setDimes( 0 );
      setNickels( 0 );
      setPennies( 0 );
   }

   public int getQuarters( )   {
      return quarters;
   }

   public void setQuarters( int newQuarters ) {
      if ( newQuarters &gt;= 0 )
         quarters = newQuarters;
      else {
         System.out.println( "The number of quarters cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getDimes( )  {
      return dimes;
   }

   public void setDimes( int newDimes ) {
      if ( newDimes &gt;= 0 )
         dimes = newDimes;
      else {
         System.out.println( "The number of dimes cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getNickels( ) {
      return nickels;
   }

   public void setNickels( int newNickels )   {
      if ( newNickels &gt;= 0 )
         nickels = newNickels;
      else {
         System.out.println( "The number of nickels cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getPennies( ) {
      return pennies;
   }

   public void setPennies( int newPennies )  {
      if ( newPennies &gt;= 0 )
         pennies = newPennies;
      else {
         System.out.println( "The number of pennies cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public String toString( ) {
      return( "quarters: " + quarters + "; dimes: " + dimes
         + "; nickels: " + nickels + "; pennies:" + pennies );
   }

   public boolean equals( Coins c )  {
      return ( quarters == c.quarters &amp;&amp; dimes == c.dimes
         &amp;&amp; nickels == c.nickels &amp;&amp; pennies == c.pennies );
   }

   private double moneyFromQuarters( )  {
      return ( quarters * .25 );
   }

   private double moneyFromDimes( )  {
      return ( dimes * .1 );
   }

   private double moneyFromNickels( )  {
      return ( nickels * .05 );
   }

   private double moneyFromPennies( ) {
      return ( pennies * .01 );
   }

   public double total( ) {
      return moneyFromQuarters + moneyFromDimes + moneyFromNickels + moneyFromPennies;
   }

   public double convert( double rate ) {
      return total * rate;
   }
}
</input></program>
            <p>Identify all the constructors from the given class definition above. Choose all that apply.</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>public Coins( )</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>public Coins(int newQuarters, int newDimes, int newNickels, int newPennies)</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public double total( )</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public double convert( double rate )</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public NewCoins()</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise xml:id="assess-wrclasses-1-2">
        <statement>

            <p>Q2: Consider the following class definition.</p>
            <program language="java"><input>
/* Coins Class */
public class Coins {
   private int quarters;
   private int dimes;
   private int nickels;
   private int pennies;

   public Coins(int newQuarters, int newDimes, int newNickels, int newPennies) {
      setQuarters( newQuarters );
      setDimes( newDimes );
      setNickels( newNickels );
      setPennies( newPennies );
   }

   public Coins( ) {
      setQuarters( 0 );
      setDimes( 0 );
      setNickels( 0 );
      setPennies( 0 );
   }

   public int getQuarters( )   {
      return quarters;
   }

   public void setQuarters( int newQuarters ) {
      if ( newQuarters &gt;= 0 )
         quarters = newQuarters;
      else {
         System.out.println( "The number of quarters cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getDimes( )  {
      return dimes;
   }

   public void setDimes( int newDimes ) {
      if ( newDimes &gt;= 0 )
         dimes = newDimes;
      else {
         System.out.println( "The number of dimes cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getNickels( ) {
      return nickels;
   }

   public void setNickels( int newNickels )   {
      if ( newNickels &gt;= 0 )
         nickels = newNickels;
      else {
         System.out.println( "The number of nickels cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getPennies( ) {
      return pennies;
   }

   public void setPennies( int newPennies )  {
      if ( newPennies &gt;= 0 )
         pennies = newPennies;
      else {
         System.out.println( "The number of pennies cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public String toString( ) {
      return( "quarters: " + quarters + "; dimes: " + dimes
         + "; nickels: " + nickels + "; pennies:" + pennies );
   }

   public boolean equals( Coins c )  {
      return ( quarters == c.quarters &amp;&amp; dimes == c.dimes
         &amp;&amp; nickels == c.nickels &amp;&amp; pennies == c.pennies );
   }

   private double moneyFromQuarters( )  {
      return ( quarters * .25 );
   }

   private double moneyFromDimes( )  {
      return ( dimes * .1 );
   }

   private double moneyFromNickels( )  {
      return ( nickels * .05 );
   }

   private double moneyFromPennies( ) {
      return ( pennies * .01 );
   }

   public double total( ) {
      return moneyFromQuarters + moneyFromDimes + moneyFromNickels + moneyFromPennies;
   }

   public double convert( double rate ) {
      return total * rate;
   }
}
</input></program>
            <p>Identify the accessor/getter methods.</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Coins</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>getQuarters, getDimes, getNickels, getPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>setQuarters, setDimes, setNickels, setPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>moneyFromQuarters, moneyFromDimes, moneyFromNickels, moneyFromPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>total, convert</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise xml:id="assess-wrclasses-1-3">
        <statement>

            <p>Q3: Consider the following class definition.</p>
            <program language="java"><input>
/* Coins Class */
public class Coins {
   private int quarters;
   private int dimes;
   private int nickels;
   private int pennies;

   public Coins(int newQuarters, int newDimes, int newNickels, int newPennies) {
      setQuarters( newQuarters );
      setDimes( newDimes );
      setNickels( newNickels );
      setPennies( newPennies );
   }

   public Coins( ) {
      setQuarters( 0 );
      setDimes( 0 );
      setNickels( 0 );
      setPennies( 0 );
   }

   public int getQuarters( )   {
      return quarters;
   }

   public void setQuarters( int newQuarters ) {
      if ( newQuarters &gt;= 0 )
         quarters = newQuarters;
      else {
         System.out.println( "The number of quarters cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getDimes( )  {
      return dimes;
   }

   public void setDimes( int newDimes ) {
      if ( newDimes &gt;= 0 )
         dimes = newDimes;
      else {
         System.out.println( "The number of dimes cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getNickels( ) {
      return nickels;
   }

   public void setNickels( int newNickels )   {
      if ( newNickels &gt;= 0 )
         nickels = newNickels;
      else {
         System.out.println( "The number of nickels cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getPennies( ) {
      return pennies;
   }

   public void setPennies( int newPennies )  {
      if ( newPennies &gt;= 0 )
         pennies = newPennies;
      else {
         System.out.println( "The number of pennies cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public String toString( ) {
      return( "quarters: " + quarters + "; dimes: " + dimes
         + "; nickels: " + nickels + "; pennies:" + pennies );
   }

   public boolean equals( Coins c )  {
      return ( quarters == c.quarters &amp;&amp; dimes == c.dimes
         &amp;&amp; nickels == c.nickels &amp;&amp; pennies == c.pennies );
   }

   private double moneyFromQuarters( )  {
      return ( quarters * .25 );
   }

   private double moneyFromDimes( )  {
      return ( dimes * .1 );
   }

   private double moneyFromNickels( )  {
      return ( nickels * .05 );
   }

   private double moneyFromPennies( ) {
      return ( pennies * .01 );
   }

   public double total( ) {
      return moneyFromQuarters + moneyFromDimes + moneyFromNickels + moneyFromPennies;
   }

   public double convert( double rate ) {
      return total * rate;
   }
}
</input></program>
            <p>Identify the mutator/setter methods.</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Coins</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>getQuarters, getDimes, getNickels, getPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>setQuarters, setDimes, setNickels, setPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>moneyFromQuarters, moneyFromDimes, moneyFromNickels, moneyFromPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>total, convert</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise xml:id="assess-wrclasses-1-4">
        <statement>

            <p>Q4: Consider the following class definition.</p>
            <program language="java"><input>
/* Coins Class */
public class Coins {
   private int quarters;
   private int dimes;
   private int nickels;
   private int pennies;

   public Coins(int newQuarters, int newDimes, int newNickels, int newPennies) {
      setQuarters( newQuarters );
      setDimes( newDimes );
      setNickels( newNickels );
      setPennies( newPennies );
   }

   public Coins( ) {
      setQuarters( 0 );
      setDimes( 0 );
      setNickels( 0 );
      setPennies( 0 );
   }

   public int getQuarters( )   {
      return quarters;
   }

   public void setQuarters( int newQuarters ) {
      if ( newQuarters &gt;= 0 )
         quarters = newQuarters;
      else {
         System.out.println( "The number of quarters cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getDimes( )  {
      return dimes;
   }

   public void setDimes( int newDimes ) {
      if ( newDimes &gt;= 0 )
         dimes = newDimes;
      else {
         System.out.println( "The number of dimes cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getNickels( ) {
      return nickels;
   }

   public void setNickels( int newNickels )   {
      if ( newNickels &gt;= 0 )
         nickels = newNickels;
      else {
         System.out.println( "The number of nickels cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getPennies( ) {
      return pennies;
   }

   public void setPennies( int newPennies )  {
      if ( newPennies &gt;= 0 )
         pennies = newPennies;
      else {
         System.out.println( "The number of pennies cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public String toString( ) {
      return( "quarters: " + quarters + "; dimes: " + dimes
         + "; nickels: " + nickels + "; pennies:" + pennies );
   }

   public boolean equals( Coins c )  {
      return ( quarters == c.quarters &amp;&amp; dimes == c.dimes
         &amp;&amp; nickels == c.nickels &amp;&amp; pennies == c.pennies );
   }

   private double moneyFromQuarters( )  {
      return ( quarters * .25 );
   }

   private double moneyFromDimes( )  {
      return ( dimes * .1 );
   }

   private double moneyFromNickels( )  {
      return ( nickels * .05 );
   }

   private double moneyFromPennies( ) {
      return ( pennies * .01 );
   }

   public double total( ) {
      return moneyFromQuarters + moneyFromDimes + moneyFromNickels + moneyFromPennies;
   }

   public double convert( double rate ) {
      return total * rate;
   }
}
</input></program>
            <p>Which of the choices lists <c>attributes</c> of the given class?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>quarters, dimes, nickels, pennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>getQuarters, getDimes, getNickels, getPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>setQuarters, setDimes, setNickels, setPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>moneyFromQuarters, moneyFromDimes, moneyFromNickels, moneyFromPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>total, convert</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise xml:id="assess-wrclasses-1-5">
        <statement>

            <p>Q5: Consider the following class definiton.</p>
            <program language="java"><input>
/* Coins Class */
public class Coins {
   private int quarters;
   private int dimes;
   private int nickels;
   private int pennies;

   public Coins(int newQuarters, int newDimes, int newNickels, int newPennies) {
      setQuarters( newQuarters );
      setDimes( newDimes );
      setNickels( newNickels );
      setPennies( newPennies );
   }

   public Coins( ) {
      setQuarters( 0 );
      setDimes( 0 );
      setNickels( 0 );
      setPennies( 0 );
   }

   public int getQuarters( )   {
      return quarters;
   }

   public void setQuarters( int newQuarters ) {
      if ( newQuarters &gt;= 0 )
         quarters = newQuarters;
      else {
         System.out.println( "The number of quarters cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getDimes( )  {
      return dimes;
   }

   public void setDimes( int newDimes ) {
      if ( newDimes &gt;= 0 )
         dimes = newDimes;
      else {
         System.out.println( "The number of dimes cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getNickels( ) {
      return nickels;
   }

   public void setNickels( int newNickels )   {
      if ( newNickels &gt;= 0 )
         nickels = newNickels;
      else {
         System.out.println( "The number of nickels cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public int getPennies( ) {
      return pennies;
   }

   public void setPennies( int newPennies )  {
      if ( newPennies &gt;= 0 )
         pennies = newPennies;
      else {
         System.out.println( "The number of pennies cannot be negative." );
         System.out.println( "Value not changed." );
      }
   }

   public String toString( ) {
      return( "quarters: " + quarters + "; dimes: " + dimes
         + "; nickels: " + nickels + "; pennies:" + pennies );
   }

   public boolean equals( Coins c )  {
      return ( quarters == c.quarters &amp;&amp; dimes == c.dimes
         &amp;&amp; nickels == c.nickels &amp;&amp; pennies == c.pennies );
   }

   private double moneyFromQuarters( )  {
      return ( quarters * .25 );
   }

   private double moneyFromDimes( )  {
      return ( dimes * .1 );
   }

   private double moneyFromNickels( )  {
      return ( nickels * .05 );
   }

   private double moneyFromPennies( ) {
      return ( pennies * .01 );
   }

   public double total( ) {
      return moneyFromQuarters + moneyFromDimes + moneyFromNickels + moneyFromPennies;
   }

   public double convert( double rate ) {
      return total * rate;
   }
}
</input></program>
            <p>Identify the helper or auxiliary methods.</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Coins</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>getQuarters, getDimes, getNickels, getPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>setQuarters, setDimes, setNickels, setPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>moneyFromQuarters, moneyFromDimes, moneyFromNickels, moneyFromPennies</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>total, convert</p>
                </statement>
                <feedback>
                    <p/>
                </feedback>
            </choice>
</choices>

    </exercise>
        </TimedNode>
</exercises>
    </section>

